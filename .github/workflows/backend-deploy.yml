name: Deploy Backend to Elastic Beanstalk

on:
  push:
    branches: [ master ]
    paths:
      - "backend/**"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: af-south-1
  EB_APP: h2go-api
  EB_ENV: H2go-api-env
  # Adjust if your role name/ARN differs:
  AWS_ROLE_ARN: arn:aws:iam::101573021364:role/h2go-eb-github-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install & Build (backend)
        working-directory: backend
        run: |
          npm ci
          npm run build

      # Build the human-friendly version label:
      # H2GO-API-<package.json version>-<YYYYMMDD-HHMMSS>
      - name: Compute version label and S3 key
        id: meta
        run: |
          PKG_VERSION=$(jq -r .version backend/package.json)
          RAW_DT=$(date +'%Y-%m-%d %H:%M:%S')
          SAFE_DT=$(echo "$RAW_DT" | sed 's/ /_/; s/:/-/g')
          VERSION_LABEL="H2GO-API - v${PKG_VERSION} - ${SAFE_DT}"

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          EB_BUCKET="elasticbeanstalk-${AWS_REGION}-${ACCOUNT_ID}"
          S3_KEY="appversions/${{ env.EB_APP }}/${VERSION_LABEL}.zip"

          echo "pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT
          echo "dt=$DT" >> $GITHUB_OUTPUT
          echo "version_label=$VERSION_LABEL" >> $GITHUB_OUTPUT
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "eb_bucket=$EB_BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=$S3_KEY" >> $GITHUB_OUTPUT

      - name: Create deploy bundle
        run: |
          rm -rf deploy && mkdir -p deploy/dist
          cp backend/package.json deploy/
          [ -f backend/package-lock.json ] && cp backend/package-lock.json deploy/
          [ -f backend/Procfile ] && cp backend/Procfile deploy/
          rsync -a backend/dist/ deploy/dist/
          # Prevent EB from running lifecycle scripts (e.g., "prepare") during npm install
          echo 'ignore-scripts=true' > deploy/.npmrc
          (cd deploy && zip -r ../app.zip .)

      - name: Ensure EB bucket exists (ok if already exists)
        run: |
          if ! aws s3 ls "s3://${{ steps.meta.outputs.eb_bucket }}" >/dev/null 2>&1; then
            aws s3 mb "s3://${{ steps.meta.outputs.eb_bucket }}" --region "${AWS_REGION}"
          fi

      - name: Upload bundle to S3
        run: |
          aws s3 cp app.zip "s3://${{ steps.meta.outputs.eb_bucket }}/${{ steps.meta.outputs.s3_key }}"

      - name: Create EB application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP}" \
            --version-label "${{ steps.meta.outputs.version_label }}" \
            --description "CI deploy ${GITHUB_SHA}" \
            --source-bundle S3Bucket="${{ steps.meta.outputs.eb_bucket }}",S3Key="${{ steps.meta.outputs.s3_key }}" \
            --auto-create-application

      - name: Update EB environment to new version
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${EB_ENV}" \
            --version-label "${{ steps.meta.outputs.version_label }}"
